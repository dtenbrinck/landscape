function settings_gui_general(f)
% SETTINGS_GUI_GENERAL the general settings

% Clear the window
clf(f);

% Access the parameter variable used in the main gui
global p;

%--------------------------------------------------------------------------
% Create all buttons and UI elements from top to bottom
%--------------------------------------------------------------------------
% Text that shows the current category of settings
box_title = uicontrol('Style', 'text', ...
    'String', 'General', ...
    'HorizontalAlignment', 'center', ...
    'FontName', 'Arial', ...
    'FontSize', 20, ...
    'Position', [100, 460, 300, 30]);

% Buttons to select the level of debugging (1-3)
box_debugging = uicontrol('Style', 'text', ...
    'String', 'Debug Level:', ...
    'HorizontalAlignment', 'left', ...
    'FontName', 'Arial', ...
    'FontSize', 10, ...
    'Position', [10, 400, 250, 20], ...
    'Tooltip', 'Option to control the amount of debug information displayed');
button_debugging_0 = uicontrol('Style', 'radiobutton', ...
    'String', '0', ...
    'FontName', 'Arial', ...
    'FontSize', 10, ...
    'Position', [250, 400, 50, 20], ...
    'Value', p.debug_level==0, ...
    'Callback', @saving_callback_debugging);
button_debugging_1 = uicontrol('Style', 'radiobutton', ...
    'String', '1', ...
    'FontName', 'Arial', ...
    'FontSize', 10, ...
    'Position', [300, 400, 50, 20], ...
    'Value', p.debug_level==1, ...
    'Callback', @saving_callback_debugging);
button_debugging_2 = uicontrol('Style', 'radiobutton', ...
    'String', '2', ...
    'FontName', 'Arial', ...
    'FontSize', 10, ...
    'Position', [350, 400, 50, 20], ...
    'Value', p.debug_level==2, ...
    'Callback', @saving_callback_debugging);

% Box to select if parallel pooling should be enabled
box_parallel = uicontrol('Style', 'text', ...
    'String', 'Parallel Processing:', ...
    'HorizontalAlignment', 'left', ...
    'FontName', 'Arial', ...
    'FontSize', 10, ...
    'Position', [10, 370, 250, 20]);
checkbox_parallel = uicontrol('Style', 'checkbox', ...
    'Value', p.parallelpool, ...
    'Position', [250,375,30,20], ...
    'Callback', @saving_callback_parallelpool);

% Boxes to select which kind of visualization should be done during the
% registration step. Parallel pooling must be disabled for visualization
box_visualization = uicontrol('Style', 'text', ...
    'String', 'Display During Registration: ', ...
    'HorizontalAlignment', 'left', ...
    'FontName', 'Arial', ...
    'FontSize', 10, ...
    'Position', [10, 340, 250, 20]);
checkbox_visualization_ellipsoid = uicontrol('Style', 'checkbox', ...
    'FontName', 'Arial', ...
    'FontSize', 10, ...
    'String', 'Ellipsoid Fitting', ...
    'Value', p.ellipsoidFitting.visualization, ...
    'Position', [250,345,200,20], ...
    'Enable', intern_function_bool_to_on_off(~p.parallelpool), ...
    'Callback', @saving_callback);
checkbox_visualization_registration = uicontrol('Style', 'checkbox', ...
    'FontName', 'Arial', ...
    'FontSize', 10, ...
    'String', 'Landmark Rotation', ...
    'Value', p.reg.visualization, ...
    'Position', [250,320,200,20], ...
    'Enable', intern_function_bool_to_on_off(~p.parallelpool), ...
    'Callback', @saving_callback);
checkbox_visualization_result = uicontrol('Style', 'checkbox', ...
    'FontName', 'Arial', ...
    'FontSize', 10, ...
    'String', 'Results', ...
    'Value', p.visualization, ...
    'Position', [250,295,200,20], ...
    'Enable', intern_function_bool_to_on_off(~p.parallelpool), ...
    'Callback', @saving_callback);

% Button that leads to the previous window
button_back = uicontrol('Style', 'pushbutton', ...
    'FontName', 'Arial', ...
    'FontSize', 15, ...
    'String', 'Back', ...
    'Position', [150, 30, 200, 50], ...
    'Callback', @button_back_callback);

%--------------------------------------------------------------------------
%Functions
%--------------------------------------------------------------------------
    function button_back_callback(source, eventdata)
        settings_gui_advanced(f);
    end

    % Function that saves all changes in specific parameters
    function saving_callback(source, eventdata)
        p.parallelpool = checkbox_parallel.Value;
        p.visualization = checkbox_visualization_result.Value;
        p.ellipsoidFitting.visualization = checkbox_visualization_ellipsoid.Value;
        p.reg.visualization = checkbox_visualization_registration.Value;
    end
    
    % Function that saves changes in the debugging level
    function saving_callback_debugging(source, eventdata)
        if source==button_debugging_0
            button_debugging_0.Value = 1;
            button_debugging_1.Value = 0;
            button_debugging_2.Value = 0;
            p.debug_level = 0;
        elseif source==button_debugging_1
            button_debugging_0.Value = 0;
            button_debugging_1.Value = 1;
            button_debugging_2.Value = 0;
            p.debug_level = 1;
        else
            button_debugging_0.Value = 0;
            button_debugging_1.Value = 0;
            button_debugging_2.Value = 1;
            p.debug_level = 2;
        end
    end

    % Function that saves changes in parallel pooling and enables/disables
    % visualization accordingly
    function saving_callback_parallelpool(source, eventdata)
        p.parallelpool = checkbox_parallel.Value;
        if p.parallelpool
            checkbox_visualization_ellipsoid.Value = false;
            checkbox_visualization_registration.Value = false;
            checkbox_visualization_result.Value = false;
            
            checkbox_visualization_ellipsoid.Enable = 'off';
            checkbox_visualization_registration.Enable = 'off';
            checkbox_visualization_result.Enable = 'off';
        else
            checkbox_visualization_ellipsoid.Enable = 'on';
            checkbox_visualization_registration.Enable = 'on';
            checkbox_visualization_result.Enable = 'on';
        end
    end

    function s = intern_function_bool_to_on_off(x)
        if x
            s = 'on';
        else
           s = 'off';
        end
    end
end

