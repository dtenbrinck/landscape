function settings_gui_heatmaps(f)
% SETTINGS_GUI_HEATMAPS the settings for heatmap creation

% Clear the window
clf(f);

% Access the parameter variable used in the main gui
global p;

%--------------------------------------------------------------------------
% Create all buttons and UI elements from top to bottom
%--------------------------------------------------------------------------
% Text that shows the current category of settings
box_title = uicontrol('Style', 'text', ...
    'String', 'Heatmaps', ...
    'HorizontalAlignment', 'center', ...
    'FontName', 'Arial', ...
    'FontSize', 20, ...
    'Position', [100, 460, 300, 30]);

% Box to select if the resolution of the heatmap should be calculated
% dynamically
box_dynamic_heatmapsize = uicontrol('Style', 'text', ...
    'String', 'Preserve XY-Ratio:', ...
    'HorizontalAlignment', 'left', ...
    'FontName', 'Arial', ...
    'FontSize', 10, ...
    'Position', [10, 400, 250, 20]);
checkbox_dynamic_heatmapsize = uicontrol('Style', 'checkbox', ...
    'Position', [250, 403, 30, 20], ...
    'Value', p.dynamicHeatmapsize, ...
    'Callback', @saving_callback_dynamic_heatmapsize);

% Editboxes to enter the resolution of the accumulator for non-dynamic heatmaps
box_gridsize = uicontrol('Style', 'text', ...
    'String', 'Accumulator Size:', ...
    'HorizontalAlignment', 'left', ...
    'FontName', 'Arial', ...
    'FontSize', 10, ...
    'Position', [10, 370, 250, 20], ...
    'Enable', intern_function_bool_to_on_off(~p.dynamicHeatmapsize));
editbox_gridsize_x = uicontrol('Style', 'edit', ...
    'String', p.gridSize(1), ...
    'Position', [250,370,50,20], ...
    'Enable', intern_function_bool_to_on_off(~p.dynamicHeatmapsize), ...
    'Callback', @saving_callback);
editbox_gridsize_y = uicontrol('Style', 'edit', ...
    'String', p.gridSize(2), ...
    'Position', [300,370,50,20], ...
    'Enable', intern_function_bool_to_on_off(~p.dynamicHeatmapsize), ...
    'Callback', @saving_callback);
editbox_gridsize_z = uicontrol('Style', 'edit', ...
    'String', p.gridSize(3), ...
    'Position', [350,370,50,20], ...
    'Enable', intern_function_bool_to_on_off(~p.dynamicHeatmapsize), ...
    'Callback', @saving_callback);

% Editbox to enter the base resolution of the accumulator for dynamic heatmaps
box_base_gridsize = uicontrol('Style', 'text', ...
    'String', 'Base Accumulator Size:', ...
    'HorizontalAlignment', 'left', ...
    'FontName', 'Arial', ...
    'FontSize', 10, ...
    'Position', [10, 340, 250, 20], ...
    'Enable', intern_function_bool_to_on_off(p.dynamicHeatmapsize));
editbox_base_gridsize = uicontrol('Style', 'edit', ...
    'String', p.gridSizeBaseValue, ...
    'Position', [250,340,50,20], ...
    'Enable', intern_function_bool_to_on_off(p.dynamicHeatmapsize), ...
    'Callback', @saving_callback);

% Editboxes to enter the heatmap resolution for non-dynamic heatmaps
box_shellheatmap_resolution = uicontrol('Style', 'text', ...
    'String', 'Shell Heatmap Resolution:', ...
    'HorizontalAlignment', 'left', ...
    'FontName', 'Arial', ...
    'FontSize', 10, ...
    'Position', [10, 310, 250, 20], ...
    'Enable', intern_function_bool_to_on_off(~p.dynamicHeatmapsize));
editbox_shellheatmap_resolution_x = uicontrol('Style', 'edit', ...
    'String', p.option.shellHeatmapResolution(1), ...
    'Position', [250,310,50,20], ...
    'Enable', intern_function_bool_to_on_off(~p.dynamicHeatmapsize), ...
    'Callback', @saving_callback);
editbox_shellheatmap_resolution_y = uicontrol('Style', 'edit', ...
    'String', p.option.shellHeatmapResolution(2), ...
    'Position', [300,310,50,20], ...
    'Enable', intern_function_bool_to_on_off(~p.dynamicHeatmapsize), ...
    'Callback', @saving_callback);

% Editbox to enter the base value for the heatmap resolution for dynamic heatmaps
box_base_shellheatmap_resolution = uicontrol('Style', 'text', ...
    'String', 'Base Shell Heatmap Resolution:', ...
    'HorizontalAlignment', 'left', ...
    'FontName', 'Arial', ...
    'FontSize', 10, ...
    'Position', [10, 280, 250, 20], ...
    'Enable', intern_function_bool_to_on_off(p.dynamicHeatmapsize));
editbox_base_shellheatmap_resolution = uicontrol('Style', 'edit', ...
    'String', p.option.shellHeatmapResolutionBaseValue, ...
    'Position', [250,280,50,20], ...
    'Enable', intern_function_bool_to_on_off(p.dynamicHeatmapsize), ...
    'Callback', @saving_callback);

% Box to check if the accumulator should be saved to a file
box_save_acc = uicontrol('Style', 'text', ...
    'String', 'Save Accumulator File:', ...
    'HorizontalAlignment', 'left', ...
    'FontName', 'Arial', ...
    'FontSize', 10, ...
    'Position', [10, 250, 300, 20]);
checkbox_save_acc = uicontrol('Style', 'checkbox', ...
    'Position', [250, 253, 30, 20], ...
    'Value', p.option.heatmaps.saveAccumulator, ...
    'Callback', @saving_callback);

% Editbox to enter the tolerance for cells outside of the unit sphere
box_tolerance = uicontrol('Style', 'text', ...
    'String', 'Tolerance:', ...
    'HorizontalAlignment', 'left', ...
    'FontName', 'Arial', ...
    'FontSize', 10, ...
    'Position', [10, 220, 300, 20]);
editbox_tolerance = uicontrol('Style', 'edit', ...
    'String', p.tole, ...
    'Position', [250,220,50,20], ...
    'Callback', @saving_callback);

% Box to check if a convolution should be performed
box_convolution = uicontrol('Style', 'text', ...
    'String', 'Convolution:', ...
    'HorizontalAlignment', 'left', ...
    'FontName', 'Arial', ...
    'FontSize', 10, ...
    'Position', [10, 190, 300, 20]);
checkbox_convolution = uicontrol('Style', 'checkbox', ...
    'Position', [250, 193, 30, 20], ...
    'Value', p.option.convolution, ...
    'Callback', @saving_callback_convolution);

% Editbox to enter the diameter of a cell
box_celldiameter = uicontrol('Style', 'text', ...
    'String', ['Cell Diameter [' char(181) 'm]:'], ...
    'HorizontalAlignment', 'left', ...
    'FontName', 'Arial', ...
    'FontSize', 10, ...
    'Enable', intern_function_bool_to_on_off(p.option.convolution), ...
    'Position', [10, 160, 250, 20]);
editbox_celldiameter = uicontrol('Style', 'edit', ...
    'String', p.cellDiameter_um, ...
    'Position', [250,160,50,20], ...
    'Enable', intern_function_bool_to_on_off(p.option.convolution), ...
    'Callback', @saving_callback);

% Boxes to select what kind of files should be saved for the heatmaps. The
% options are .png, .fig and .csv
box_heatmap_saveas = uicontrol('Style', 'text', ...
    'String', 'Save Heatmaps as:', ...
    'HorizontalAlignment', 'left', ...
    'FontName', 'Arial', ...
    'FontSize', 10, ...
    'Position', [10, 130, 250, 20]);
checkbox_save_png = uicontrol('Style', 'checkbox', ...
    'String', '.png', ...
    'FontName', 'Arial', ...
    'FontSize', 10, ...
    'Position', [250, 133, 50, 20], ...
    'Value', any(strcmp(p.option.heatmaps.saveas, 'png')), ...
    'Callback', @saving_callback_saveas);
checkbox_save_fig = uicontrol('Style', 'checkbox', ...
    'String', '.fig', ...
    'FontName', 'Arial', ...
    'FontSize', 10, ...
    'Position', [325, 133, 50, 20], ...
    'Value', any(strcmp(p.option.heatmaps.saveas, 'fig')), ...
    'Callback', @saving_callback_saveas);
checkbox_save_csv = uicontrol('Style', 'checkbox', ...
    'String', '.csv', ...
    'FontName', 'Arial', ...
    'FontSize', 10, ...
    'Position', [400, 133, 50, 20], ...
    'Value', p.option.heatmaps.saveCSV, ...
    'Callback', @saving_callback);

% Button to go back to the previous window
button_back = uicontrol('Style', 'pushbutton', ...
    'FontName', 'Arial', ...
    'FontSize', 15, ...
    'String', 'Back', ...
    'Position', [150, 30, 200, 50], ...
    'Callback', @button_back_callback);

%--------------------------------------------------------------------------
%Functions
%--------------------------------------------------------------------------
    function button_back_callback(source, eventdata)
        settings_gui_advanced(f);
    end

    % Function to save the choice on dynamic heatmapsize and enable/diable
    % corresponding UI elements
    function saving_callback_dynamic_heatmapsize(source, eventdata)
        p.dynamicHeatmapsize = checkbox_dynamic_heatmapsize.Value;
        if p.dynamicHeatmapsize
            box_gridsize.Enable = 'off';
            editbox_gridsize_x.Enable = 'off';
            editbox_gridsize_y.Enable = 'off';
            editbox_gridsize_z.Enable = 'off';
            box_base_gridsize.Enable = 'on';
            editbox_base_gridsize.Enable = 'on';
            
            box_shellheatmap_resolution.Enable = 'off';
            editbox_shellheatmap_resolution_x.Enable = 'off';
            editbox_shellheatmap_resolution_y.Enable = 'off';
            box_base_shellheatmap_resolution.Enable = 'on';
            editbox_base_shellheatmap_resolution.Enable = 'on';
        else
            box_gridsize.Enable = 'on';
            editbox_gridsize_x.Enable = 'on';
            editbox_gridsize_y.Enable = 'on';
            editbox_gridsize_z.Enable = 'on';
            box_base_gridsize.Enable = 'off';
            editbox_base_gridsize.Enable = 'off';
            
            box_shellheatmap_resolution.Enable = 'on';
            editbox_shellheatmap_resolution_x.Enable = 'on';
            editbox_shellheatmap_resolution_y.Enable = 'on';
            box_base_shellheatmap_resolution.Enable = 'off';
            editbox_base_shellheatmap_resolution.Enable = 'off';
        end
    end

    % Function to save all changes to specific parameters
    function saving_callback(source, eventdata)
        p.gridSize = [round(str2double(editbox_gridsize_x.String)); round(str2double(editbox_gridsize_y.String)); round(str2double(editbox_gridsize_z.String))];
        editbox_gridsize_x.String = p.gridSize(1);
        editbox_gridsize_y.String = p.gridSize(2);
        editbox_gridsize_z.String = p.gridSize(3);
        p.gridSizeBaseValue = round(str2double(editbox_base_gridsize.String));
        editbox_base_gridsize.String = p.gridSizeBaseValue;
        
        p.option.shellHeatmapResolution = [round(str2double(editbox_shellheatmap_resolution_x.String)), round(str2double(editbox_shellheatmap_resolution_y.String))];
        editbox_shellheatmap_resolution_x.String = p.option.shellHeatmapResolution(1);
        editbox_shellheatmap_resolution_y.String = p.option.shellHeatmapResolution(2);
        p.option.shellHeatmapResolutionBaseValue = round(str2double(editbox_base_shellheatmap_resolution.String));
        editbox_base_shellheatmap_resolution.String = p.option.shellHeatmapResolutionBaseValue;
        
        p.option.heatmaps.saveCSV = checkbox_save_csv.Value;
        p.option.heatmaps.saveAccumulator = checkbox_save_acc.Value;
        p.tole = str2double(editbox_tolerance.String);
        
        p.cellDiameter_um = str2double(editbox_celldiameter.String);
        p.cellDiameter = p.cellDiameter_um/(p.resolution(1));
    end

    % Function to save changes on the choice of files that the heatmaps
    % will be saved as
    function saving_callback_saveas(source, eventdata)
        if checkbox_save_png.Value
            if checkbox_save_fig.Value
                p.option.heatmaps.saveas = {'png','fig'};
            else
                p.option.heatmaps.saveas = {'png'};
            end
        elseif checkbox_save_fig.Value
            p.option.heatmaps.saveas = {'fig'};
        else
            p.option.heatmaps.saveas = {};
        end
    end

    % Function to save changes to the convolution settings and
    % enable/disable the cell diameter UI element
    function saving_callback_convolution(source, eventdata)
        p.option.convolution = checkbox_convolution.Value;
        box_celldiameter.Enable = intern_function_bool_to_on_off(p.option.convolution);
        editbox_celldiameter.Enable = intern_function_bool_to_on_off(p.option.convolution);
    end

    function s = intern_function_bool_to_on_off(x)
        if x
            s = 'on';
        else
           s = 'off';
        end
    end
end

